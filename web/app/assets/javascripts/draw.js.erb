function drawNoVersions() {
  return $("<span>No versions</span>");
}

function drawVersionButton(time) {
  var b = $("<button>").addClass("versionButton").text(time);
  return b;
}

function drawVersionEntry(reviewsButton, versionButton) {
  return $("<div>").append(reviewsButton).append(versionButton);
}

function drawVersionsButton() {
  return $("<button>+</button>").addClass("versionsButton");
}

function setVersionsButtonPending(b) {
  b.html("<img src='/assets/spinner.gif'/>");
}

function setVersionsButtonReady(b) {
  b.text("+");
}

function drawVersionsContainer(versionsButton, versionsList) {
  return $("<div>")
    .append(versionsButton)
    .append($("<div>").addClass("clearfix"))
    .append(versionsList)
    .addClass("versionsContainer");
}

function drawVersionsList(visible, initialButtons) {
  var versions = $("<div>").css("display", visible ? "block" : "none");
  initialButtons.forEach(function(b) {
    versions.append(b);
  });
  return versions;
}

function drawLikertJustification() {
  return $("<div>")
    .append($("<h4>").text("Please briefly justify your score:"))
    .append($("<textarea>").addClass("likertText"));
}

var likertLabels = [
    "Strongly Disagree",
    "Disagree",
    "Slightly Disagree",
    "Slightly Agree",
    "Agree",
    "Strongly Agree"
  ];
function drawLikert(message, name) {
  var radioContainer = $("<div>").addClass("likert");
  radioContainer.append($("<div>").text(message).addClass("reviewScoreMessage"));
  var rand = String(Math.random());
  likertLabels.forEach(function(l, ix) {
    var value = ix - (likertLabels.length / 2);
    var id = name + ix + rand;
    radioContainer.append(
      $("<span>")
        .addClass("likertButton")
        .append($("<input type='radio' id='" + id + "' name='" + name + "'>")
                .attr("value", value))
        .append($("<label for='" + id + "'>").text(l)));
  });
  return radioContainer;
}

function drawReviewScore(title, name, labels, values) {
  var radioContainer = $("<div>");
  radioContainer.append($("<div>").text(title + ":").addClass("reviewScoreTitle"));
  var id;
  _.times(labels.length, function (i) {
    id = name + i;
    radioContainer.append(
      $("<div>")
        .addClass("reviewButton")
        .append($("<label for='" + id + "'>").text(labels[i]))
        .append("<br>")
        .append($("<input type='radio' id='" + id + "' name='" + name + "'>")
                .attr("value", values[i])));
  });
  return radioContainer.addClass("reviewScore reviewScore-" + name);
}

function drawReviewTextSubmitContainer() {
  return $("<div>").addClass("reviewTextSubmit");
}

function getScore(reviewScore) {
  return reviewScore.find("input:checked").val();
}

function markInvalidReviewScore(reviewScore) {
  reviewScore.addClass('invalidScore');
}

function markOkReviewScore(reviewScore) {
  reviewScore.removeClass('invalidScore');
}

function selectReviewScore(reviewScore, value) {
  reviewScore.find("input[value=" + value + "]").click().prop("checked", true);
}

function drawShowWriteReview() {
  return $("<button>").css({float: "right"}).text("Review").addClass("writeReview");
}

function drawCodeRunButton() {
  return $("<button>").css({float: "right"}).text("Run");
}

function drawCodeReviewContainer() {
  return $("<div>").addClass("codeReviewContainer");
}

function drawReviewContainer() {
  return $("<div>").addClass("reviewContainer");
}

function drawWriteReviewContainer() {
  return $("<div>").addClass("reviewContainer");
}

function drawSubmitReviewButton() {
  return $("<button>")
    .text("Submit review")
    .css({float: 'right'})
    .addClass("submitReview");
}

function drawReviewText(enabled) {
  return $("<div>")
    .append($("<h4>").text("Comments:"))
    .append($("<textarea>")
            .addClass("reviewText")
            .prop("disabled", !enabled));
}

function disableReviewText(rt) {
  rt.find("textarea").prop("disabled", true);
}

function enableReviewText(rt) {
  rt.find("textarea").prop("disabled", false);
}

function disableReviewScore(score) {
  score.find("input").prop("disabled", true);
}

function setReviewText(rt, text) {
  rt.find("textarea").val(text);
}

function getReviewText(rt) {
  return rt.find("textarea").val();
}


function drawReviewsButton() {
  return $("<div>").addClass("reviewLink");
}

function setReviewNumber(elt, c) {
  elt.text(c + elt.text()).attr("title", c + " reviews");
}

function setHasFeedback(elt) {
  elt.text(elt.text() + "*");
}

function drawReviewsDiv(name, time) {
  var rd = $("<div>");
  rd.append($("<h3>").text("Review for " + name + " at " + time));
  return rd;
}

function drawReviewsDivName(name, part) {
  var rd = $("<div>");
  rd.append($("<h3>").text("Review for " + part + " of " + name));
  return rd;
}

function drawReviewContainer() {
  return $("<div>");
}

function getLikertLabel(value) {
  var index = Number(value) + (likertLabels.length / 2)
  return likertLabels[index];
}

function drawReview(revData, type, abuseData) {
  var prompts = reviewStatements[type];
  var rev = $("<div>").addClass("reviewContents");
  if (abuseData) {
    rev.append(drawReportAbuse(abuseData))
  }
  return rev.append($("<div>").text(prompts[0]).addClass("likertScoreLabel"))
    .append($("<div>").text(getLikertLabel(revData.review.design))
                      .addClass("likertScore"))
    .append($("<p>").text("Justification: " + revData.review.designComments))
    .append($("<hr>"))
    .append($("<div>").text(prompts[1]).addClass("likertScoreLabel"))
    .append($("<div>").text(getLikertLabel(revData.review.correctness))
                      .addClass("likertScore"))
    .append($("<p>").text("Justification: " + revData.review.correctnessComments));
}

var feedbackPrompt = "This review was helpful";

function drawFeedbackContainer() {
  return $("<div>");
}

function drawFeedback(submit) {
  var container = $("<div>").addClass("feedback");
  var likert = drawLikert(feedbackPrompt, "feedback")
  var comment = $("<textarea>");
  var submitButton = $("<button>").addClass("blueButton").text("Submit").on("click", function () {
    var score = getScore(likert);
    if(score !== undefined) {
      likert.removeClass("invalidScore");
      if(ct_confirm("Are you sure you want to submit this feedback?")) {
        submitButton.off("click");
        submitButton.prop("disabled", true);
        submit(getScore(likert), comment.val());
      }
    } else {
      likert.addClass("invalidScore");
    }
  });
  return container
    .append(likert)
    .append($("<div>").text("Optional comments:"))
    .append(comment)
    .append(submitButton);
}

function drawSubmittedFeedback(feedback, abuseData) {
  if(feedback.canned) {
    return $("<div>")
      .addClass("feedbackGiven")
      .append($("<p>").text("Feedback:"))
      .append($("<div>").text(feedback.message).addClass("feedbackComments"));
  }
  else {
    var fb = $("<div>")
      .addClass("feedbackGiven")
      .append($("<p>").text("Feedback:"));
    if (abuseData) {
      fb.append(drawReportAbuse(abuseData))
    }
    return fb.append($("<div>").text(feedbackPrompt))
      .append($("<div>").addClass("likertFeedbackScore").append($("<span>").text(getLikertLabel(feedback.helpfullness))))
      .append($("<div>").text("Optional comments"))
      .append($("<div>").text(feedback.comments).addClass("feedbackComments"));
  }
}


function drawSavedNotification(container) {
  var saved = $("<span>Saved</span>");
  container.append(saved);
  saved.fadeOut(2000);
}

function drawNextStepButton() {
  return $("<button>").text("Next Step");
}

function drawStepsContainer() {
  return $("<div>").addClass("stepsContainer");
}

function drawStepButton(text) {
  return $("<button>").text(text);
}

function drawCurrentStepGutterMarker(isSubmittable) {
  var b = $("<span>").addClass("gutterButton active");
  b.text("â†’");
  return b;
}

function drawSubmitStepButton(stepName) {
  return $("<div>").addClass("submitStep").append($("<span>").text("submit " + stepName));
}

function drawSwitchToStepGutterMarker(n) {
  return $("<span>").addClass("gutterButton").text(n)[0];
}

function drawInactiveStepGutterMarker(n) {
  return $("<span>").addClass("gutterButton inactive").text(n)[0];
}

function drawProgressContainer() {
  return $("<div>").addClass("progressContainer");
}

function drawProgressStep(width) {
  return $("<span>").addClass("progressStep").css("width", width + "%");
}

function drawCurrentStepTitle() {
  return $("<h3>");
}

function setCurrentStepTitle(dom, title) {
  dom.text(title);
}

function drawEditorContainer() {
  return $("<div>").addClass("editorContainer");
}

function drawReviewsTab() {
  return $("<div>").addClass("reviewsTab");
}

function drawReviewEditorContainer() {
  return $("<div>").addClass("reviewEditorContainer");
}

function drawInstructionsWidget(html) {
  var visible = true;
  var instr = $("<div>")
    .addClass("toggleInstructions");
  function setInstrMessage() {
    if (visible) {
      instr.text("click to hide");
    } else {
      instr.text("click to show");
    }
  }
  setInstrMessage();

  var content = $("<div>")
    .addClass("instructionsContent")
    .html(html);

  var container = $("<div>")
    .addClass("instructionsWidget");

  var dom = container
    .append(instr)
    .append(content)
    .append($("<div>").addClass("clearfix"));

  dom.on("click", function () {
    if (visible) {
      visible = false;
      content.hide();
      setInstrMessage();
      container.addClass("hidden");
    } else {
      visible = true;
      content.show();
      setInstrMessage();
      container.removeClass("hidden");
    }
  });

  return dom;
}

function drawSaveContainer() {
  return $("<div>").addClass("saveIndicator");
}


function drawRunButton() {
  return $("<div>")
    .addClass("runButton")
    .addClass("blueButton")
    .html("run &rarr;");
}

function drawResetButton() {
  return $("<div>")
    .addClass("blueButton")
    .addClass("resetButton")
    .html("reset editor");
}

function drawClearFix() {
  return $("<div>").addClass("clearfix");
}

function drawErrorMessageWithLoc(message, link) {
  var errorMessage = $("<span>").text(message);
  return $("<div>").addClass("errorMessage")
    .append(link.addClass("errorLocation"))
    .append("<span>:&nbsp;</span>")
    .append(errorMessage);
}

function drawErrorLocations(links) {
  var container = $("<div>").addClass("errorLocations");
  links.forEach(function(l) {
    container.append($("<div>").addClass("errorLocation")
                               .append(l));
  })
  return container;
}


var dataCorrectStatement = "This data definition covers all the cases of data that it needs to represent.";
var dataDesignStatement = "This data definition is structured well and all the names are appropriate.";

var testsCorrectStatement = "These tests correctly reflect the desired behavior.";
var testsDesignStatement = "These tests are representative of the possible inputs.";

var funCorrectStatement = "This code correctly implements the desired behavior.";
var funDesignStatement = "This code is structured well."

var reviewStatements = {
  "fun-checks": [testsCorrectStatement, testsDesignStatement],
  "body": [funCorrectStatement, funDesignStatement],
  "data-checks": [dataCorrectStatement, dataDesignStatement]
};

function reportAbuse(abuseData, success, failure) {
  ct_log("Abuse: ", abuseData);
  $.ajax(RAILS_HOST + "/notification/report_abuse", {
    success: function(response, _, xhr) {
      success(response);
    },
    error: failure,
    type: "POST",
    data: { abuse_data: JSON.stringify(abuseData) }
  });
}

function drawReportAbuse(abuseData) {
  var container = $("<div>").addClass("reportAbuse");
  container.append($("<img>").attr("src", "<%= asset_path('Red_flag_waving.png') %>"));
  container.attr("title", "Report Abuse");
  container.click(function(e) {
    var confirmed = ct_confirm("This will send a message to the course staff, identifying this content as an abuse of the system.  Are you sure you want to proceed?");
    if(confirmed) {
      reportAbuse(abuseData, function() {
        ct_alert("Your abuse report was saved.");
      }, function() {
        ct_alert("Your abuse report was not saved because of a server error or connection problem.  Please report your issue directly to the course staff.");
      });
    }
  });
  return container;
}


function drawPanelMaximizeButton() {
  return $("<span>").addClass("maximize");
}

function drawPanelMinimizeButton() {
  return $("<span>").addClass("minimize");
}

function drawModal(content, onClose) {
  function close() {
    container.hide();
    onClose();
  }
  var container = $("<div>").addClass("modal");
  var modalClose = $("<div>").addClass("modalClose").text("close");
  modalClose.click(close);
  $(document).keydown(function(e) {
    if(e.which === 27) { close(); }
  });
  var contentDiv = $("<p>").text(content); 
  container.append(modalClose).append(contentDiv);
  $(document.body).append(container);
}

